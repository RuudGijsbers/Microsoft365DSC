[ClassVersion("1.0.0")]
class MSFT_DeviceManagementApplicabilityRuleOsEdition
{
    [Write, Description("Applicability rule OS edition type"),ValueMap{"0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19"}, Values{"Windows10Enterprise","Windows10EnterpriseN","Windows10Education","Windows10EducationN","Windows10MobileEnterprise","Windows10HolographicEnterprise","Windows10Professional","Windows10ProfessionalN","Windows10ProfessionalEducation","Windows10ProfessionalEducationN","Windows10ProfessionalWorkstation","Windows10ProfessionalWorkstationN","NotConfigured","Windows10Home","Windows10HomeChina","Windows10HomeN","Windows10HomeSingleLanguage","Windows10Mobile","Windows10IoTCore","Windows10IoTCoreCommercial"}] String OsEditionTypes[];
    [Write, Description("Name for object")] String Name[];
    [Write, Description("Applicability Rule type. Possible values are: include, exclude"),ValueMap{"0","1"}, Values{"include","exclude"}] String RuleType;
};

[ClassVersion("1.0.0")]
class MSFT_DeviceManagementApplicabilityRuleOsVersion
{
    [Write, Description("Min OS version for Applicability Rule")] String MinOSVersion;
    [Write, Description("Max OS version for Applicability Rule")] String MaxOSVersion;
    [Write, Description("Name for object.")] String Name;
    [Write, Description("Applicability Rule type. Possible values are: include, exclude"),ValueMap{"0","1"}, Values{"include","exclude"}] String RuleType;
};

[ClassVersion("1.0.0")]
class MSFT_DeviceManagementApplicabilityRuleDeviceMode
{
    [Write, Description("Applicability rule for device mode. Possible values are: standardConfiguration, sModeConfiguration"),ValueMap{"0","1"}, Values{"StandardConfiguration","SModeConfiguration"}] String DeviceMode;
    [Write, Description("The Store URL of the application")] String Name;
    [Write, Description("Applicability Rule type. Possible values are: include, exclude"),ValueMap{"0","1"}, Values{"include","exclude"}] String ruleType;
};

[ClassVersion("1.0.0")]
class MSFT_AppListItem
{
    [Write, Description("The application name")] String Name;
    [Write, Description("The publisher of the application")] String Publisher;
    [Write, Description("The Store URL of the application")] String AppStoreUrl;
    [Write, Description("The application or bundle identifier of the application.")] String AppId;
};

[ClassVersion("1.0.0")]
class mediaContentRatingAustralia
{
    [Write, Description("Movies rating selected for Australia. Possible values are: allAllowed, allBlocked, general, parentalGuidance, mature, agesAbove15, agesAbove18")] String MovieRating;
    [Write, Description("TV rating selected for Australia. Possible values are: allAllowed, allBlocked, preschoolers, children, general, parentalGuidance, mature, agesAbove15, agesAbove15AdultViolence.")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingCanada
{
    [Write, Description("Movies rating selected for Canada. Possible values are: allAllowed, allBlocked, general, parentalGuidance, agesAbove14, agesAbove18, restricted")] String MovieRating;
    [Write, Description("TV rating selected for Canada. Possible values are: allAllowed, allBlocked, children, childrenAbove8, general, parentalGuidance, agesAbove14, agesAbove18.")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingFrance
{
    [Write, Description("Movies rating selected for France. Possible values are: allAllowed, allBlocked, agesAbove10, agesAbove12, agesAbove16, agesAbove18")] String MovieRating;
    [Write, Description("TV rating selected for France. Possible values are: allAllowed, allBlocked, agesAbove10, agesAbove12, agesAbove16, agesAbove18")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingGermany
{
    [Write, Description("Movies rating selected for Germany. Possible values are: allAllowed, allBlocked, general, agesAbove6, agesAbove12, agesAbove16, adults")] String MovieRating;
    [Write, Description("TV rating selected for Germany. Possible values are: allAllowed, allBlocked, general, agesAbove6, agesAbove12, agesAbove16, adults")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingIreland
{
    [Write, Description("Movies rating selected for Ireland. Possible values are: allAllowed, allBlocked, general, parentalGuidance, agesAbove12, agesAbove15, agesAbove16, adults.")] String MovieRating;
    [Write, Description("TV rating selected for Ireland. Possible values are: allAllowed, allBlocked, general, children, youngAdults, parentalSupervision, mature.")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingJapan
{
    [Write, Description("Movies rating selected for Jspsm. Possible values are: allAllowed, allBlocked, general, parentalGuidance, agesAbove15, agesAbove18.")] String MovieRating;
    [Write, Description("TV rating selected for Japan. Possible values are: allAllowed, allBlocked, explicitAllowed.")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingNewZealand
{
    [Write, Description("Movies rating selected for NewZealand. Possible values are: allAllowed, allBlocked, general, parentalGuidance, mature, agesAbove13, agesAbove15, agesAbove16, agesAbove18, restricted, agesAbove16Restricted.")] String MovieRating;
    [Write, Description("TV rating selected for NewZealand. Possible values are: allAllowed, allBlocked, general, parentalGuidance, adults.")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingUnitedKingdom
{
    [Write, Description("Movies rating selected for United Kingdom. Possible values are: allAllowed, allBlocked, general, universalChildren, parentalGuidance, agesAbove12Video, agesAbove12Cinema, agesAbove15, adults.")] String MovieRating;
    [Write, Description("TV rating selected for United Kingdom. Possible values are: allAllowed, allBlocked, caution.")] String TVRating;
};

[ClassVersion("1.0.0")]
class mediaContentRatingUnitedStates
{
    [Write, Description("Movies rating selected for mediaContentRatingUnitedStates. Possible values are: allAllowed, allBlocked, general, parentalGuidance, parentalGuidance13, restricted, adults.")] String MovieRating;
    [Write, Description("TV rating selected for mediaContentRatingUnitedStates. Possible values are: allAllowed, allBlocked, childrenAll, childrenAbove7, general, parentalGuidance, childrenAbove14, adults.")] String TVRating;
};

[ClassVersion("1.0.0")]
class MSFT_NetworkUsageRules
{
    [Write, Description("Information about the managed apps that this rule is going to apply to. This collection can contain a maximum of 500 elements"),EmbeddedInstance("MSFT_AppListItem")] String ManagedApps[];
    [Write, Description("If set to true, corresponding managed apps will not be allowed to use cellular data when roaming")] Boolean CellularDataBlockWhenRoaming;
    [Write, Description("If set to true, corresponding managed apps will not be allowed to use cellular data at any time")] Boolean CellularDataBlocked;
};

[ClassVersion("1.0.0.0"), FriendlyName("IntuneDeviceConfigurationPolicyiOS")]
class MSFT_IntuneDeviceConfigurationPolicyiOS : OMI_BaseResource
{
    [Key, Description("Display name of the device configuration policy for iOS.")] String DisplayName;
    [Write, Description("Description of the device configuration policy for iOS.")] String Description;
    [Write, Description("Indicates whether or not to allow account modification when the device is in supervised mode.")] Boolean AccountBlockModification;
    [Write, Description("Indicates whether or not to allow activation lock when the device is in the supervised mode.")] Boolean ActivationLockAllowWhenSupervised;
    [Write, Description("Indicates whether or not to allow AirDrop when the device is in supervised mode")] Boolean AirDropBlocked;
    [Write, Description("Indicates whether or not to cause AirDrop to be considered an unmanaged drop target (iOS 9.0 and later)")] Boolean AirDropForceUnmanagedDropTarget;
    [Write, Description("Indicates whether or not to enforce all devices receiving AirPlay requests from this device to use a pairing password.")] Boolean AirPlayForcePairingPasswordForOutgoingRequests;
    [Write, Description("Indicates whether or not to allow Apple Watch pairing when the device is in supervised mode (iOS 9.0 and later)")] Boolean AppleWatchBlockPairing;
    [Write, Description("Indicates whether or not to force a paired Apple Watch to use Wrist Detection (iOS 8.2 and later)")] Boolean AppleWatchForceWristDetection;
    [Write, Description("Indicates whether or not to block the user from using News when the device is in supervised mode (iOS 9.0 and later)")] Boolean AppleNewsBlocked;
    [Write, Description("Gets or sets the list of iOS apps allowed to autonomously enter Single App Mode. Supervised only. iOS 7.0 and later This collection can contain a maximum of 500 elements"),EmbeddedInstance("MSFT_AppListItem")] String AppsSingleAppModeList[];
    [Write, Description("List of apps in the visibility list either visible/launchable apps list or hidden/unlaunchable apps list, controlled by AppsVisibilityListType (iOS 9.3 and later). This collection can contain a maximum of 10000 elements"),EmbeddedInstance("MSFT_AppListItem")] String AppsVisibilityList[];
    [Write, Description("Type of list that is in the AppsVisibilityList"),ValueMap{"0","1","2"}, Values{"none","appsInListCompliant","appsNotInListCompliant"}] String AppsVisibilityListType;
    [Write, Description("Indicates whether or not to block the automatic downloading of apps purchased on other devices when the device is in supervised mode (iOS 9.0 and later)")] Boolean AppStoreBlockAutomaticDownloads;
    [Write, Description("Indicates whether or not to block the user from using the App Store. Requires a supervised device for iOS 13 and later")] Boolean AppStoreBlocked;
    [Write, Description("Indicates whether or not to block the user from making in app purchases")] Boolean AppStoreBlockInAppPurchases;
    [Write, Description("Indicates whether or not to block the App Store app, not restricting installation through Host apps. Applies to supervised mode only (iOS 9.0 and later)")] Boolean AppStoreBlockUIAppInstallation;
    [Write, Description("Indicates whether or not to require a password when using the app store")] Boolean AppStoreRequirePassword;
    [Write, Description("Indicates whether or not to force user authentication before autofilling passwords and credit card information in Safari and other apps on supervised devices")] Boolean AutoFillForceAuthentication;
    [Write, Description("Indicates whether or not to allow modification of Bluetooth settings when the device is in supervised mode (iOS 10.0 and later)")] Boolean BluetoothBlockModification;
    [Write, Description("Indicates whether or not to block the user from accessing the camera of the device. Requires a supervised device for iOS 13 and later")] Boolean CameraBlocked;
    [Write, Description("Indicates whether or not to block data roaming")] Boolean CellularBlockDataRoaming;
    [Write, Description("Indicates whether or not to block global background fetch while roaming")] Boolean CellularBlockGlobalBackgroundFetchWhileRoaming;
    [Write, Description("Indicates whether or not to allow changes to cellular app data usage settings when the device is in supervised mode")] Boolean CellularBlockPerAppDataModification;
    [Write, Description("Indicates whether or not to block Personal Hotspot")] Boolean CellularBlockPersonalHotspot;
    [Write, Description("Indicates whether or not to allow users to change the settings of the cellular plan on a supervised device")] Boolean CellularBlockPlanModification;
    [Write, Description("Indicates whether or not to block voice roaming")] Boolean CellularBlockVoiceRoaming;
    [Write, Description("Indicates whether or not to block untrusted TLS certificates")] Boolean CertificatesBlockUntrustedTlsCertificates;
    [Write, Description("Indicates whether or not to allow remote screen observation by Classroom app when the device is in supervised mode (iOS 9.3 and later)")] Boolean ClassroomAppBlockRemoteScreenObservation;
    [Write, Description("Indicates whether or not to automatically give permission to the teacher of a managed course on the Classroom app to view a student's screen without prompting when the device is in supervised mode")] Boolean ClassroomAppForceUnpromptedScreenObservation;
    [Write, Description("Indicates whether or not to automatically give permission to the teacher's requests, without prompting the student, when the device is in supervised mode")] Boolean ClassroomForceAutomaticallyJoinClasses;
    [Write, Description("Indicates whether or not to allow the teacher to lock apps or the device without prompting the student. Supervised only")] Boolean ClassroomForceUnpromptedAppAndDeviceLock;
    [Write, Description("List of apps in the compliance (either allow list or block list, controlled by CompliantAppListType). This collection can contain a maximum of 10000 elements"),EmbeddedInstance("MSFT_AppListItem")] String CompliantAppsList[];
    [Write, Description("List that is in the AppComplianceList"),ValueMap{"0","1","2"}, Values{"none","appsInListCompliant","appsNotInListCompliant"}] String CompliantAppListType;
    [Write, Description("Indicates whether or not to block the user from installing configuration profiles and certificates interactively when the device is in supervised mode")] Boolean ConfigurationProfileBlockChanges;
    [Write, Description("Indicates whether or not to block definition lookup when the device is in supervised mode (iOS 8.1.3 and later)")] Boolean DefinitionLookupBlocked;
    [Write, Description("Indicates whether or not to allow the user to enables restrictions in the device settings when the device is in supervised mode")] Boolean DeviceBlockEnableRestrictions;
    [Write, Description("Indicates whether or not to allow the use of the 'Erase all content and settings' option on the device when the device is in supervised mode")] Boolean DeviceBlockEraseContentAndSettings;
    [Write, Description("Indicates whether or not to allow device name modification when the device is in supervised mode (iOS 9.0 and later)")] Boolean DeviceBlockNameModification;
    [Write, Description("Indicates whether or not to block diagnostic data submission")] Boolean DiagnosticDataBlockSubmission;
    [Write, Description("Indicates whether or not to allow diagnostics submission settings modification when the device is in supervised mode (iOS 9.3.2 and later)")] Boolean DiagnosticDataBlockSubmissionModification;
    [Write, Description("Indicates whether or not to block the user from viewing managed documents in unmanaged apps")] Boolean DocumentsBlockManagedDocumentsInUnmanagedApps;
    [Write, Description("Indicates whether or not to block the user from viewing unmanaged documents in managed apps")] Boolean DocumentsBlockUnmanagedDocumentsInManagedApps;
    [Write, Description("An email address lacking a suffix that matches any of these strings will be considered out-of-domain")] String EmailInDomainSuffixes[];
    [Write, Description("Indicates whether or not to block the user from trusting an enterprise app")] Boolean EnterpriseAppBlockTrust;
    [Write, Description("[Deprecated] Configuring this setting and setting the value to 'true' has no effect on the device")] Boolean EnterpriseAppBlockTrustModification;
    [Write, Description("Indicates whether or not to allow the addition or removal of cellular plans on the eSIM of a supervised device")] Boolean EsimBlockModification;
    [Write, Description("Indicates whether or not to block the user from using FaceTime. Requires a supervised device for iOS 13 and later")] Boolean FaceTimeBlocked;
    [Write, Description("Indicates whether or not to block changes to Find My Friends when the device is in supervised mode")] Boolean FindMyFriendsBlocked;
    [Write, Description("Indicates whether or not to block the user from having friends in Game Center. Requires a supervised device for iOS 13 and later")] Boolean GamingBlockGameCenterFriends;
    [Write, Description("Indicates whether or not to block the user from using multiplayer gaming. Requires a supervised device for iOS 13 and later")] Boolean GamingBlockMultiplayer;
    [Write, Description("Indicates whether or not to block the user from using Game Center when the device is in supervised mode")] Boolean GameCenterBlocked;
    [Write, Description("Indicates whether or not to allow host pairing to control the devices an iOS device can pair with when the iOS device is in supervised mode")] Boolean HostPairingBlocked;
    [Write, Description("Indicates whether or not to block the user from using the iBooks Store when the device is in supervised mode")] Boolean iBooksStoreBlocked;
    [Write, Description("Indicates whether or not to block the user from downloading media from the iBookstore that has been tagged as erotica")] Boolean iBooksStoreBlockErotica;
    [Write, Description("Indicates whether or not to block the user from continuing work they started on iOS device to another iOS or macOS device")] Boolean iCloudBlockActivityContinuation;
    [Write, Description("Indicates whether or not to block iCloud backup. Requires a supervised device for iOS 13 and later")] Boolean iCloudBlockBackup;
    [Write, Description("Indicates whether or not to block iCloud document sync. Requires a supervised device for iOS 13 and later")] Boolean iCloudBlockDocumentSync;
    [Write, Description("Indicates whether or not to block Managed Apps Cloud Sync")] Boolean iCloudBlockManagedAppsSync;
    [Write, Description("Indicates whether or not to block iCloud Photo Library")] Boolean iCloudBlockPhotoLibrary;
    [Write, Description("Indicates whether or not to block iCloud Photo Stream Sync")] Boolean iCloudBlockPhotoStreamSync;
    [Write, Description("Indicates whether or not to block Shared Photo Stream")] Boolean iCloudBlockSharedPhotoStream;
    [Write, Description("Indicates whether or not to require backups to iCloud be encrypted")] Boolean iCloudRequireEncryptedBackup;
    [Write, Description("Indicates whether or not to block the user from accessing explicit content in iTunes and the App Store. Requires a supervised device for iOS 13 and later")] Boolean iTunesBlockExplicitContent;
    [Write, Description("Indicates whether or not to block Music service and revert Music app to classic mode when the device is in supervised mode (iOS 9.3 and later and macOS 10.12 and later)")] Boolean iTunesBlockMusicService;
    [Write, Description("Indicates whether or not to block the user from using iTunes Radio when the device is in supervised mode (iOS 9.3 and later)")] Boolean iTunesBlockRadio;
    [Write, Description("Indicates whether or not to block keyboard auto-correction when the device is in supervised mode (iOS 8.1.3 and later)")] Boolean KeyboardBlockAutoCorrect;
    [Write, Description("Indicates whether or not to block the user from using dictation input when the device is in supervised mode")] Boolean KeyboardBlockDictation;
    [Write, Description("Indicates whether or not to block predictive keyboards when device is in supervised mode (iOS 8.1.3 and later)")] Boolean KeyboardBlockPredictive;
    [Write, Description("Indicates whether or not to block keyboard shortcuts when the device is in supervised mode (iOS 9.0 and later)")] Boolean KeyboardBlockShortcuts;
    [Write, Description("Indicates whether or not to block keyboard spell-checking when the device is in supervised mode (iOS 8.1.3 and later)")] Boolean KeyboardBlockSpellCheck;
    [Write, Description("Indicates whether or not to allow assistive speak while in kiosk mode")] Boolean KioskModeAllowAssistiveSpeak;
    [Write, Description("Indicates whether or not to allow access to the Assistive Touch Settings while in kiosk mode")] Boolean KioskModeAllowAssistiveTouchSettings;
    [Write, Description("Indicates whether or not to allow device auto lock while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockAutoLock instead")] Boolean KioskModeAllowAutoLock;
    [Write, Description("Indicates whether or not to block device auto lock while in kiosk mode")] Boolean kioskModeBlockAutoLock;
    [Write, Description("Indicates whether or not to allow access to the Color Inversion Settings while in kiosk mode")] Boolean KioskModeAllowColorInversionSettings;
    [Write, Description("Indicates whether or not to allow use of the ringer switch while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockRingerSwitch instead")] Boolean KioskModeAllowRingerSwitch;
    [Write, Description("Indicates whether or not to block use of the ringer switch while in kiosk mode")] Boolean KioskModeBlockRingerSwitch;
    [Write, Description("Indicates whether or not to allow screen rotation while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockScreenRotation instead")] Boolean KioskModeAllowScreenRotation;
    [Write, Description("Indicates whether or not to block screen rotation while in kiosk mode")] Boolean KioskModeBlockScreenRotation;
    [Write, Description("Indicates whether or not to allow use of the sleep button while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockSleepButton instead")] Boolean KioskModeAllowSleepButton;
    [Write, Description("Indicates whether or not to block use of the sleep button while in kiosk mode")] Boolean KioskModeBlockSleepButton;
    [Write, Description("Indicates whether or not to allow use of the touchscreen while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockTouchscreen instead")] Boolean KioskModeAllowTouchscreen;
    [Write, Description("Indicates whether or not to block use of the touchscreen while in kiosk mode")] Boolean KioskModeBlockTouchscreen;
    [Write, Description("Indicates whether or not to enable voice control in kiosk mode")] Boolean KioskModeEnableVoiceControl;
    [Write, Description("Indicates whether or not to allow the user to toggle voice control in kiosk mode")] Boolean KioskModeAllowVoiceControlModification;
    [Write, Description("Indicates whether or not to allow access to the voice over settings while in kiosk mode")] Boolean KioskModeAllowVoiceOverSettings;
    [Write, Description("Indicates whether or not to allow use of the volume buttons while in kiosk mode. This property's functionality is redundant with the OS default and is deprecated. Use KioskModeBlockVolumeButtons instead")] Boolean KioskModeAllowVolumeButtons;
    [Write, Description("Indicates whether or not to block the volume buttons while in Kiosk Mode")] Boolean KioskModeBlockVolumeButtons;
    [Write, Description("Indicates whether or not to allow access to the zoom settings while in kiosk mode")] Boolean KioskModeAllowZoomSettings;
    [Write, Description("URL in the app store to the app to use for kiosk mode. Use if KioskModeManagedAppId is not known")] String KioskModeAppStoreUrl;
    [Write, Description("ID for built-in apps to use for kiosk mode. Used when KioskModeManagedAppId and KioskModeAppStoreUrl are not set")] String KioskModeBuiltInAppId;
    [Write, Description("Indicates whether or not to require Assistive Touch while in kiosk mode")] Boolean KioskModeRequireAssistiveTouch;
    [Write, Description("Indicates whether or not to require color inversion while in kiosk mode")] Boolean KioskModeRequireColorInversion;
    [Write, Description("Indicates whether or not to require mono audio while in kiosk mode")] Boolean KioskModeRequireMonoAudio;
    [Write, Description("Indicates whether or not to require voice over while in kiosk mode")] Boolean KioskModeRequireVoiceOver;
    [Write, Description("Indicates whether or not to require zoom while in kiosk mode")] Boolean KioskModeRequireZoom;
    [Write, Description("Managed app id of the app to use for kiosk mode. If KioskModeManagedAppId is specified then KioskModeAppStoreUrl will be ignored")] String KioskModeManagedAppId;
    [Write, Description("Indicates whether or not to block the user from using control center on the lock screen")] Boolean LockScreenBlockControlCenter;
    [Write, Description("Indicates whether or not to block the user from using the notification view on the lock screen")] Boolean LockScreenBlockNotificationView;
    [Write, Description("Indicates whether or not to block the user from using passbook when the device is locked")] Boolean LockScreenBlockPassbook;
    [Write, Description("Indicates whether or not to block the user from using the Today View on the lock screen")] Boolean LockScreenBlockTodayView;
    [Write, Description("Media content rating settings for Australia"),EmbeddedInstance("MSFT_MediaContentRatingAustralia")] String MediaContentRatingAustralia[];
    [Write, Description("Media content rating settings for Canada"),EmbeddedInstance("MSFT_MediaContentRatingCanada")] String MediaContentRatingCanada[];
    [Write, Description("Media content rating settings for France"),EmbeddedInstance("MSFT_MediaContentRatingFrance")] String MediaContentRatingFrance[];
    [Write, Description("Media content rating settings for Germany"),EmbeddedInstance("MSFT_MediaContentRatingGermany")] String MediaContentRatingGermany[];
    [Write, Description("Media content rating settings for Ireland"),EmbeddedInstance("MediaContentRatingIreland")] String MediaContentRatingIreland[];
    [Write, Description("Media content rating settings for Japan"),EmbeddedInstance("MSFT_MediaContentRatingJapan")] String MediaContentRatingJapan[];
    [Write, Description("Media content rating settings for New Zealand"),EmbeddedInstance("MSFT_MediaContentRatingNewZealand")] String MediaContentRatingNewZealand[];
    [Write, Description("Media content rating settings for United Kingdom"),EmbeddedInstance("MSFT_MediaContentRatingUnitedKingdom")] String MediaContentRatingUnitedKingdom[];
    [Write, Description("Media content rating settings for United States"),EmbeddedInstance("MSFT_MediaContentRatingUnitedStates")] String MediaContentRatingUnitedStates[];
    [Write, Description("List of managed apps and the network rules that applies to them. This collection can contain a maximum of 1000 elements"),EmbeddedInstance("MSFT_NetworkUsageRules")] String NetworkUsageRules[];
    [Write, Description("Media content rating settings for Apps"),ValueMap{"0","1","2","3","4","5"}, Values{"AllAllowed","allBlocked","agesAbove4","agesAbove9","agesAbove12","agesAbove17"}] String MediaContentRatingApps;
    [Write, Description("Indicates whether or not to block the user from using the Messages app on the supervised device")] Boolean messagesBlocked;
    [Write, Description("Indicates whether or not to allow notifications settings modification (iOS 9.3 and later)")] Boolean NotificationsBlockSettingsModification;
    [Write, Description("Indicates whether or not to block fingerprint unlock")] Boolean PasscodeBlockFingerprintUnlock;
    [Write, Description("Indicates whether or not to block modification of registered Touch ID fingerprints when in supervised mode")] Boolean PasscodeBlockFingerprintModification;
    [Write, Description("Indicates whether or not to allow passcode modification on the supervised device (iOS 9.0 and later)")] Boolean PasscodeBlockModification;
    [Write, Description("Indicates whether or not to block simple passcodes")] Boolean PasscodeBlockSimple;
    [Write, Description("Indicates the number of days before the passcode expires. Valid values 1 to 65535")] UInt32 PasscodeExpirationDays;
    [Write, Description("Indicates the minimum length of passcode. Valid values 4 to 14")] UInt32 PasscodeMinimumLength;
    [Write, Description("Indicates the minutes of inactivity before a passcode is required")] UInt32 PasscodeMinutesOfInactivityBeforeLock;
    [Write, Description("Indicates the minutes of inactivity before the screen times out")] UInt32 PasscodeMinutesOfInactivityBeforeScreenTimeout;
    [Write, Description("Indicates the number of character sets a passcode must contain. Valid values 0 to 4")] UInt32 PasscodeMinimumCharacterSetCount;
    [Write, Description("Indicates the number of previous passcodes to block. Valid values 1 to 24")] UInt32 PasscodePreviousPasscodeBlockCount;
    [Write, Description("Indicates the number of sign in failures allowed before wiping the device. Valid values 2 to 11")] UInt32 PasscodeSignInFailureCountBeforeWipe;
    [Write, Description("Type of passcode that is required. Possible values are: deviceDefault, alphanumeric, numeric"),ValueMap{"0","1","2"}, Values{"deviceDefault","alphanumeric","numeric"}] String PasscodeRequiredType;
    [Write, Description("Indicates whether or not to require a passcode")] Boolean PasscodeRequired;
    [Write, Description("Indicates whether or not to block the user from using podcasts on the supervised device (iOS 8.0 and later)")] Boolean PodcastsBlocked;
    [Write, Description("Indicates whether or not to enable the prompt to setup nearby devices with a supervised device")] Boolean ProximityBlockSetupToNewDevice;
    [Write, Description("Indicates whether or not to block the user from using Auto fill in Safari. Requires a supervised device for iOS 13 and later")] Boolean SafariBlockAutofill;
    [Write, Description("Indicates whether or not to block JavaScript in Safari")] Boolean SafariBlockJavaScript;
    [Write, Description("Indicates whether or not to block PopUps in Safari")] Boolean SafariBlockPopups;
    [Write, Description("Indicates whether or not to block the user from using Safari. Requires a supervised device for iOS 13 and later")] Boolean SafariBlocked;
    [Write, Description("Cookie settings for Safari. Possible values are: browserDefault, blockAlways, allowCurrentWebSite, allowFromWebsitesVisited, allowAlways"),ValueMap{"0","1","2","3","4"}, Values{"browserDefault","blockAlways","allowCurrentWebSite","allowFromWebsitesVisited","allowAlways"}] String SafariCookieSettings;
    [Write, Description("URLs matching the patterns listed here will be considered managed")] String SafariManagedDomains[];
    [Write, Description("Users can save passwords in Safari only from URLs matching the patterns listed here. Applies to devices in supervised mode (iOS 9.3 and later)")] String SafariPasswordAutoFillDomains[];
    [Write, Description("Indicates whether or not to require fraud warning in Safari")] Boolean SafariRequireFraudWarning;
    [Write, Description("Indicates whether or not to block the user from taking Screenshots")] Boolean ScreenCaptureBlocked;
    [Write, Description("Indicates whether or not to block the user from using Siri")] Boolean SiriBlocked;
    [Write, Description("Indicates whether or not to block the user from using Siri when locked")] Boolean SiriBlockedWhenLocked;
    [Write, Description("Indicates whether or not to block Siri from querying user-generated content when used on a supervised device")] Boolean SiriBlockUserGeneratedContent;
    [Write, Description("Indicates whether or not to prevent Siri from dictating, or speaking profane language on supervised device")] Boolean SiriRequireProfanityFilter;
    [Write, Description("Sets how many days a software update will be delyed for a supervised device. Valid values 0 to 90")] UInt32 SoftwareUpdatesEnforcedDelayInDays;
    [Write, Description("Indicates whether or not to delay user visibility of software updates when the device is in supervised mode")] Boolean SoftwareUpdatesForceDelayed;
    [Write, Description("Indicates whether or not to block Spotlight search from returning internet results on supervised device")] Boolean SpotlightBlockInternetResults;
    [Write, Description("Indicates whether or not to block voice dialing")] Boolean VoiceDialingBlocked;
    [Write, Description("Indicates whether or not to allow wallpaper modification on supervised device (iOS 9.0 and later)")] Boolean WallpaperBlockModification;
    [Write, Description("Indicates whether or not to force the device to use only Wi-Fi networks from configuration profiles when the device is in supervised mode. Available for devices running iOS and iPadOS versions 14.4 and earlier. Devices running 14.5+ should use the setting, “WiFiConnectToAllowedNetworksOnlyForced")] Boolean WiFiConnectOnlyToConfiguredNetworks;
    [Write, Description("Indicates whether a student enrolled in an unmanaged course via Classroom will request permission from the teacher when attempting to leave the course (iOS 11.3 and later)")] Boolean ClassroomForceRequestPermissionToLeaveClasses;
    [Write, Description("Indicates whether or not iCloud keychain synchronization is blocked. Requires a supervised device for iOS 13 and later")] Boolean KeychainBlockCloudSync;
    [Write, Description("Indicates whether or not over-the-air PKI updates are blocked. Setting this restriction to false does not disable CRL and OCSP checks (iOS 7.0 and later)")] Boolean PkiBlockOTAUpdates;
    [Write, Description("Indicates if ad tracking is limited.(iOS 7.0 and later)")] Boolean PrivacyForceLimitAdTracking;
    [Write, Description("Indicates whether or not Enterprise book back up is blocked")] Boolean EnterpriseBookBlockBackup;
    [Write, Description("Indicates whether or not Enterprise book notes and highlights sync is blocked")] Boolean EnterpriseBookBlockMetadataSync;
    [Write, Description("Indicates whether or not AirPrint is blocked (iOS 11.0 and later)")] Boolean AirPrintBlocked;
    [Write, Description("Indicates whether or not keychain storage of username and password for Airprint is blocked (iOS 11.0 and later)")] Boolean AirPrintBlockCredentialsStorage;
    [Write, Description("Indicates if trusted certificates are required for TLS printing communication (iOS 11.0 and later)")] Boolean AirPrintForceTrustedTLS;
    [Write, Description("Indicates whether or not iBeacon discovery of AirPrint printers is blocked. This prevents spurious AirPrint Bluetooth beacons from phishing for network traffic (iOS 11.0 and later)")] Boolean AirPrintBlockiBeaconDiscovery;
    [Write, Description("Indicates if devices can access files or other resources on a network server using the Server Message Block (SMB) protocol. Available for devices running iOS and iPadOS, versions 13.0 and later")] Boolean FilesNetworkDriveAccessBlocked;
    [Write, Description("Indicates if sevices with access can connect to and open files on a USB drive. Available for devices running iOS and iPadOS, versions 13.0 and later")] Boolean FilesUsbDriveAccessBlocked;
    [Write, Description("Indicates whether or not Wi-Fi remains on, even when device is in airplane mode. Available for devices running iOS and iPadOS, versions 13.0 and later")] Boolean WifiPowerOnForced;
    [Write, Description("Indicates whether or not the removal of system apps from the device is blocked on a supervised device (iOS 11.0 and later)")] Boolean BlockSystemAppRemoval;
    [Write, Description("Indicates whether or not the creation of VPN configurations is blocked (iOS 11.0 and later)")] Boolean VpnBlockCreation;
    [Write, Description("Indicates if the removal of apps is allowed")] Boolean AppRemovalBlocked;
    [Write, Description("Indicates if connecting to USB accessories while the device is locked is allowed (iOS 11.4.1 and later)")] Boolean UsbRestrictedModeBlocked;
    [Write, Description("Indicates if the AutoFill passwords feature is allowed (iOS 12.0 and later)")] Boolean PasswordBlockAutoFill;
    [Write, Description("Indicates whether or not to block requesting passwords from nearby devices (iOS 12.0 and later)")] Boolean PasswordBlockProximityRequests;
    [Write, Description("Indicates whether or not to block sharing passwords with the AirDrop passwords feature iOS 12.0 and later)")] Boolean PasswordBlockAirDropSharing;
    [Write, Description("Indicates whether or not the Date and Time Set Automatically feature is enabled and cannot be turned off by the user (iOS 12.0 and later)")] Boolean DateAndTimeForceSetAutomatically;
    [Write, Description("Indicates whether or not managed apps can write contacts to unmanaged contacts accounts (iOS 12.0 and later)")] Boolean ContactsAllowManagedToUnmanagedWrite;
    [Write, Description("Indicates whether or not unmanaged apps can read from managed contacts accounts (iOS 12.0 or later)")] Boolean ContactsAllowUnmanagedToManagedRead;
    [Write, Description("Indicates whether or not to block the user from modifying the personal hotspot setting (iOS 12.2 or later)")] Boolean CellularBlockPersonalHotspotModification;
    [Write, Description("Indicates whether or not to block the continuous path keyboard when the device is supervised (iOS 13 or later)")] Boolean ContinuousPathKeyboardBlocked;
    [Write, Description("Indicates whether or not to block Find My Device when the device is supervised (iOS 13 or later)")] Boolean FindMyDeviceInFindMyAppBlocked;
    [Write, Description("Indicates whether or not to block Find My Friends when the device is supervised (iOS 13 or later)")] Boolean FindMyFriendsInFindMyAppBlocked;
    [Write, Description("Indicates whether or not to block the iTunes app. Requires a supervised device for iOS 13 and later")] Boolean ITunesBlocked;
    [Write, Description("Indicates whether or not to block temporary sessions on Shared iPads (iOS 13.4 or later)")] Boolean SharedDeviceBlockTemporarySessions;
    [Write, Description("Prevents a user from adding any App Clips and removes any existing App Clips on the device.")] Boolean AppClipsBlocked;
    [Write, Description("Limits Apple personalized advertising when true. Available in iOS 14 and later")] Boolean ApplePersonalizedAdsBlocked;
    [Write, Description("Disable NFC to prevent devices from pairing with other NFC-enabled devices. Available for iOS/iPadOS devices running 14.2 and later")] Boolean NfcBlocked;
    [Write, Description("Blocks users from unlocking their device with Apple Watch. Available for devices running iOS and iPadOS versions 14.5 and later")] Boolean AutoUnlockBlocked;
    [Write, Description("Allow users to boot devices into recovery mode with unpaired devices. Available for devices running iOS and iPadOS versions 14.5 and later")] Boolean UnpairedExternalBootToRecoveryAllowed;
    [Write, Description("Disables connections to Siri servers so that users can’t use Siri to dictate text. Available for devices running iOS and iPadOS versions 14.5 and later")] Boolean OnDeviceOnlyDictationForced;
    [Write, Description("Require devices to use Wi-Fi networks set up via configuration profiles. Available for devices running iOS and iPadOS versions 14.5 and later")] Boolean WiFiConnectToAllowedNetworksOnlyForced;
    [Write, Description("When set to TRUE, the setting disables connections to Siri servers so that users can’t use Siri to translate text. When set to FALSE, the setting allows connections to to Siri servers to users can use Siri to translate text. Available for devices running iOS and iPadOS versions 15.0 and later")] Boolean OnDeviceOnlyTranslationForced;
    [Write, Description("Open-in management controls how people share data between unmanaged and managed apps. Setting this to true enforces copy/paste restrictions based on how you configured Block viewing corporate documents in unmanaged apps and Block viewing non-corporate documents in corporate apps")] Boolean ManagedPasteboardRequired;
    [Write, Description("Type of app to run in kiosk mode. Possible values are: notConfigured, appStoreApp, managedApp, builtInApp"),ValueMap{"0","1","2","3"}, Values{"notConfigured","appStoreApp","managedApp","builtInApp"}] String KioskModeAppType;
    [Write, Description("List of Scope Tags for this Entity instance. Inherited from deviceConfiguration")] String RoleScopeTagIds[];
    [Write, Description("The OS edition applicability for this Policy. Inherited from deviceConfiguration"),EmbeddedInstance("MSFT_DeviceManagementApplicabilityRuleOsEdition")] String DeviceManagementApplicabilityRuleOsEdition[];
    [Write, Description("The OS version applicability rule for this Policy. Inherited from deviceConfiguration"),EmbeddedInstance("MSFT_DeviceManagementApplicabilityRuleOsVersion")] String DeviceManagementApplicabilityRuleOsVersion[];
    [Write, Description("The device mode applicability rule for this Policy. Inherited from deviceConfiguration"),EmbeddedInstance("MSFT_DeviceManagementApplicabilityRuleDeviceMode")] String DeviceManagementApplicabilityRuleDeviceMode[];
    [Write, Description("Present ensures the policy exists, absent ensures it is removed"), ValueMap{"Present","Absent"}, Values{"Present","Absent"}] String Ensure;
    [Write, Description("Credentials of the Intune Admin"), EmbeddedInstance("MSFT_Credential")] String Credential;
    [Write, Description("Id of the Azure Active Directory application to authenticate with.")] String ApplicationId;
    [Write, Description("Id of the Azure Active Directory tenant used for authentication.")] String TenantId;
    [Write, Description("Secret of the Azure Active Directory tenant used for authentication.")] String ApplicationSecret;
    [Write, Description("CertificateThumbprint of the Azure Active Directory tenant used for authentication.")] String CertificateThumbprint;
};
