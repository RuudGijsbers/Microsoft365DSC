name: Unit Tests
on: [push, pull_request]

jobs:
  # This workflow contains a single job called "build"
  UnitTests:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Only when run from the main repo
    if: github.repository == 'microsoft/Microsoft365DSC'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install Dependencies
        shell: powershell
        run: |
          $VerbosePreference = 'Continue'
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

          $manifest = Import-PowerShellDataFile "./Modules/Microsoft365DSC/Dependencies/Manifest.psd1"
          $dependencies = $manifest.Dependencies
          $i = 1
          foreach ($dependency in $dependencies)
          {
              Write-Progress -Activity "Scanning Dependencies" -PercentComplete ($i / $dependencies.Count * 100)
              try
              {
                  Install-Module $dependency.ModuleName -RequiredVersion $dependency.RequiredVersion -AllowClobber -Force
              }
              catch
              {
                  Write-Host "Could not update {$($dependency.ModuleName)}"
              }
              $i++
          }
      - name: Run Test Harness
        shell: powershell
        run: |
          Get-Module -ListAvailable | Out-String
          Import-Module PnP.PowerShell -Force
          Install-Module Pester -Force -SkipPublisherCheck -RequiredVersion 5.0.4
          [System.Environment]::SetEnvironmentVariable('M365DSCTelemetryEnabled', $false, [System.EnvironmentVariableTarget]::Machine);
          Import-Module './Tests/TestHarness.psm1' -Force;
          $MaximumFunctionCount = 9999

          try
          {
              $results = Invoke-TestHarness -IgnoreCodeCoverage
          }
          catch
          {
              $MaximumFunctionCount = 9999
              Import-Module './Tests/TestHarness.psm1' -Force;
              $results = Invoke-TestHarness -IgnoreCodeCoverage
          }
          if ($results.FailedCount -gt 0)
          {
              throw "{$($results.FailedCount)} Unit Test(s) Failed"
          }
